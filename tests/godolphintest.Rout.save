
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> require(FrF2)
Loading required package: FrF2
Loading required package: DoE.base
Loading required package: grid
Loading required package: conf.design

Attaching package: 'DoE.base'

The following objects are masked from 'package:stats':

    aov, lm

The following object is masked from 'package:graphics':

    plot.design

The following object is masked from 'package:base':

    lengths

> ### tests for Godolphin methodology
> 
> ### colpick
> ## colpick for full factorial
> colpick(6, 2)   ## default
checking up to 162 matrices
$X
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    0    1    1    0    1    1
[2,]    1    0    1    1    0    1

$clear2fis
 [1] "AB" "AC" "AE" "AF" "BC" "BD" "BF" "CD" "CE" "DE" "DF" "EF"

> ## character estimability requirement
> colpick(6, 3, estimable=compromise(6, 4)$requirement)
a clear design requires at least 16 runs
checking up to 720 matrices
$X
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    0    0    0    1    1    1
[2,]    0    1    1    0    0    1
[3,]    1    0    1    0    1    0

$clear2fis
 [1] "AB" "AC" "AD" "AE" "AF" "BC" "BD" "BE" "BF" "CD" "CE" "CF" "DE" "DF" "EF"

$map
[1] 1 2 3 4 5 6

> ## matrix estimability requirement
> colpick(6, 3, estimable=rbind(4, c(1:3,5:6)))
checking up to 720 matrices
$X
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    0    0    0    1    1    1
[2,]    0    1    1    0    0    1
[3,]    1    0    1    0    1    0

$clear2fis
 [1] "AB" "AC" "AD" "AE" "AF" "BC" "BD" "BE" "BF" "CD" "CE" "CF" "DE" "DF" "EF"

$map
[1] 1 2 3 4 5 6

> ## character design specification
> colpick("6-1.1", 3, estimable=compromise(6, 4)$requirement)
a clear design requires at least 16 runs
checking up to 120 matrices
$X
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    0    0    0    1    1    0
[2,]    0    1    1    0    0    0
[3,]    1    0    1    0    1    1

$clear2fis
 [1] "AB" "AC" "AD" "AE" "BC" "BD" "BE" "BF" "CD" "CE" "CF" "DE" "DF" "EF"

$map
[1] 1 3 4 2 5 6

> ## catlg design specification
> colpick(catlg["6-1.1"], 3, estimable=compromise(6, 4)$requirement)
a clear design requires at least 16 runs
checking up to 120 matrices
$X
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    0    0    0    1    1    0
[2,]    0    1    1    0    0    0
[3,]    1    0    1    0    1    1

$clear2fis
 [1] "AB" "AC" "AD" "AE" "BC" "BD" "BE" "BF" "CD" "CE" "CF" "DE" "DF" "EF"

$map
[1] 1 3 4 2 5 6

> ## impossible request
> colpick(catlg["8-2.1"], 1)
checking up to 1 matrices
no suitable block arrangement was found
> 
> ## phimax
> phimax(8, 2)            ## maximum possible
[1] 21
> phimax(8, 2, c(4,3,1))  ## fewer
[1] 19
> phimax(9, 4)            ## all
[1] 36
> 
> ## blockgencreate
> blockgencreate(rbind(c(1,1,1,0,0,0,1),
+                      c(1,1,0,1,1,1,0)), 2)
[1] "AB"  "ACD" "ACE"
> 
> ## Xcalc
> ## gen character
> Xcalc(rbind(c(1,1,0,0),c(0,1,1,1)), 
+        gen=c("AB","BCD"))
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    1    1    0    0    0    1
[2,]    0    1    1    1    1    1
> ## gen list
> Xcalc(rbind(c(1,1,0,0),c(0,1,1,1)), 
+              gen=list(c(1,2),2:4))
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    1    1    0    0    0    1
[2,]    0    1    1    1    1    1
> ## gen Yates columns
> Xcalc(rbind(c(1,1,0,0),c(0,1,1,1)), 
+              gen=c(3,14))
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    1    1    0    0    0    1
[2,]    0    1    1    1    1    1
> ## gen catlg
> Xcalc(rbind(c(1,1,0,0),c(0,1,1,1)), 
+              gen=catlg[nruns(catlg)==16 & 
+                          res(catlg)==4])
$`5-1.2`
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    1    0    0    0
[2,]    0    1    1    1    0

$`6-2.1`
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    1    1    0    0    0    0
[2,]    0    1    1    1    0    0

$`7-3.1`
     [,1] [,2] [,3] [,4] [,5] [,6] [,7]
[1,]    1    1    0    0    0    0    1
[2,]    0    1    1    1    0    0    0

$`8-4.1`
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
[1,]    1    1    0    0    0    0    1    1
[2,]    0    1    1    1    0    0    0    1

> 
> 
> proc.time()
   user  system elapsed 
   0.57    0.12    0.64 
